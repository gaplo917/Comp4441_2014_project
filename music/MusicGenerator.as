package music {		import flash.display.MovieClip;	import org.si.sion.*;	import org.si.sion.utils.SiONPresetVoice;	import flash.sampler.StackFrame;	import org.si.sound.patterns.Sequencer;	import org.si.sound.SoundObject;	import flash.display.*;    import flash.events.*;    import flash.text.TextField;    import org.si.sion.events.*;	import org.si.sion.effector.*;	import org.si.sion.sequencer.*;	public class MusicGenerator extends MovieClip {		//=========================================================//		// play or pause		public var playMusic:Boolean = false;		// mode (1:normal 2:piano 3:semi-tone piano)		public var musicMode = 1;		// direction (1:L->R 2:R->L)		public var playDirection = 1;		//=========================================================//		 // preset voice        public var presetVoice:SiONPresetVoice = new SiONPresetVoice();                // voices, notes and tracks        public var voices:Vector.<SiONVoice> = new Vector.<SiONVoice>(16);				/* added by Gary			notes = pitch value,  1 octave = 12			from 0 - 127		*/		public var notes :Vector.<int>;				/* added by Gary		*	length = time played in second		*/		public var length:Vector.<Number>;		public var playMode:String = "normal";        // beat counter        public var beatCounter:int;                // control pad        public var matrixPad:MatrixPad;				public var timer_constant =  1;		public var mStage:Stage;		static public var soundDriver:SiONDriver = new SiONDriver();		static var voicePresets:SiONPresetVoice = new SiONPresetVoice();				soundDriver.effector.slot1 = [new SiEffectStereoReverb(0.7, 0.4, 0.9, 1)];		soundDriver.effector.slot2 = [new SiEffectStereoChorus(20, 0.2, 4, 20, 1)];		 // _onBeat (SiONTrackEvent.BEAT) is called back in each beat at the sound timing.        private function _onBeat(e:SiONTrackEvent) : void         {			if (playDirection == 1) {				matrixPad.beat( (e.eventTriggerID*(1/timer_constant) & 15));			}						else if (playDirection == 2) {				matrixPad.beat(15-(e.eventTriggerID*(1/timer_constant) & 15));			}                    }                        // _onTimerInterruption (SiONDriver.setTimerInterruption) is called back in each beat at the buffering timing.        private function _onTimerInterruption() : void        {			var i:int;            var beatIndex:int = beatCounter & 15;            			if (playDirection == 1) {				beatCounter++;				for ( i=0; i<16; i++) {					if (matrixPad.sequences[i] & (1<<beatIndex)) {						soundDriver.noteOn(notes[i], voices[i], length[i]);					}				}			}						else if (playDirection == 2) {				beatCounter--;				for ( i=15; i>0; i--) {					if (matrixPad.sequences[i] & (1<<beatIndex)) soundDriver.noteOn(notes[i], voices[i], length[i]);				}			}				        }		public function MusicGenerator(stage:Stage) {			var i:int;            mStage = stage;			normalMode();			init();			initMatrixPad(stage);            soundDriver.stop();					}		public function destroy(){			soundDriver.stop();			mStage.removeChild(matrixPad);		}		private function init(){			// listen            soundDriver.setBeatCallbackInterval(1);            soundDriver.addEventListener(SiONTrackEvent.BEAT, _onBeat);            soundDriver.setTimerInterruption(1*timer_constant, _onTimerInterruption);			            // start streaming            beatCounter = 0;		}		private function initMatrixPad(stage:Stage){			with(stage.addChild(matrixPad = new MatrixPad(stage))) {                x = y = 20;            }		}				private function normalMode(){			var i:int;			playMode = "normal";			notes = Vector.<int>([36,48,60,72, 43,48,55,60, 65,67,69,70, 72,74,76,77]);						length = Vector.<Number>([ 1, 1, 1, 1,  1, 1, 1, 1,  4, 4, 4, 4,  4, 4, 4, 4]);			 /* set voices from preset				percus = percussion				0 			*/            var percusVoices:Array = presetVoice["valsound.percus"];			/* By testing for each one			0 = basic bass, 			1 = electronic bass 			2 = strong bass			*/            voices[0] = percusVoices[2];  // bass drum            voices[1] = percusVoices[27]; // snare drum            voices[2] = percusVoices[16]; // close hihat            voices[3] = percusVoices[22]; // open hihat            for ( i=4; i<8;  i++) voices[i] = presetVoice["valsound.bass18"];  // bass            for ( i=8; i<16; i++) voices[i] = presetVoice["valsound.piano1"]; // e.piano            		}		private function pianoMode(){			playMode = "piano";			for (var i=0; i<16; i++) voices[i] = presetVoice["valsound.piano1"]; // e.piano				notes = Vector.<int>([60,62,64,65, 67,69,71,72, 74,76,77,79, 81,83,84,86]);				length = Vector.<Number>([ 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1]);		}		private function pianoSemiToneMode(){			playMode = "piano";			for (var i=0; i<16; i++) voices[i] = presetVoice["valsound.piano1"]; // e.piano				notes = Vector.<int>([60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75]);				length = Vector.<Number>([ 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1, 1]);		}		public function increaseSpeed(e:MouseEvent) : void {			if(timer_constant > 0.125){				timer_constant /= 2;				updateNotesLength(timer_constant);				soundDriver.stop();				init();				soundDriver.play();			}						}		private function updateNotesLength(c:Number){			for(var i =0; i< length.length ; i++){				if(playMode =="normal" && i <4)					continue;				length[i] *= c;			}		}		public function decreaseSpeed(e:MouseEvent) : void {			if(timer_constant < 8){				timer_constant *= 2;				soundDriver.stop();				init();				soundDriver.play();			}		}				//=========================================================//		public function playPauseMusic(e:MouseEvent) : void {			if (playMusic == true) {				playMusic = false;				soundDriver.stop();			}			else {				playMusic = true;				soundDriver.play();			}		}				public function changeMusicMode(e:MouseEvent) : void {			if (musicMode == 1) {				musicMode = 2;				pianoMode();			}			else if(musicMode ==2){				musicMode = 3;				pianoSemiToneMode();			}			else if(musicMode == 3){				musicMode = 1 ;				normalMode();			}		}							public function addReverb(e:MouseEvent) : void {			trace("added effect");			soundDriver.stop();			soundDriver.effector.initialize();			soundDriver.effector.slot1 = [new SiEffectStereoReverb(0.7, 0.4, 0.9, 1)];			soundDriver.effector.slot2 = [new SiEffectStereoChorus(20, 0.2, 4, 20, 1)];			soundDriver.play();		}		public function changeDirection(e:MouseEvent) : void {			if (playDirection == 1) {				playDirection = 2;				soundDriver.stop();				init();				soundDriver.play();			}			else {				playDirection = 1;				soundDriver.stop();				init();				soundDriver.play();			}		}		//=========================================================//	}	}import flash.display.*;import flash.events.*;import flash.geom.*;class MatrixPad extends Bitmap {	private var row:int = 16;	private var col:int = 16;    public var sequences:Vector.<int> = new Vector.<int>(16);    private var canvas:Shape = new Shape();    private var buffer:BitmapData = new BitmapData(col*20, row*20, true, 0);    private var padOn:BitmapData  = _pad(0xFFFFFF, 0x7BCA3D);	private var padOnCliked:BitmapData  = _pad(0xFFFFFF, 0xFE3B0E);    private var padOff:BitmapData = _pad(0x000000, 0xDEE0E0);    private var pt:Point = new Point();    private var colt:ColorTransform = new ColorTransform(1,1,1,0.1)        function MatrixPad(stage:Stage) {		super(new BitmapData(col*20, row*20, false, 0));        var i:int;        for (i=0; i<col; i++) {            pt.x = (i)*20;			for(var j=0; j< row ; j++){				pt.y = (j)*20;				buffer.copyPixels(padOff, padOff.rect, pt);				bitmapData.copyPixels(padOff, padOff.rect, pt);			}        }        for (i=0; i<row; i++) sequences[i] = 0;        addEventListener("enterFrame", _onEnterFrame);        stage.addEventListener("click",  _onClick);    }    public function destroy(){		buffer.dispose();		padOn.dispose();		padOnCliked.dispose();		padOff.dispose();			}    private function _pad(border:int, face:int) : BitmapData {        var pix:BitmapData = new BitmapData(20, 20, false, 0);        canvas.graphics.clear();        canvas.graphics.lineStyle(1, border);        canvas.graphics.beginFill(face);        canvas.graphics.drawRect(1, 1, 17, 17);        canvas.graphics.endFill();        pix.draw(canvas);        return pix;    }            private function _onEnterFrame(e:Event) : void {        bitmapData.draw(buffer, null, colt);    }            private function _onClick(e:Event) : void {        if (mouseX>=0 && mouseX<col*20 && mouseY>=0 && mouseY<row*20) {            var track:int = (row-1)-int(mouseY*0.05), beat:int = int(mouseX*0.05);            sequences[track] ^= 1<<beat;            pt.x = beat*20;            pt.y = ((row-1)-track)*20;            if (sequences[track] & (1<<beat)) 				buffer.copyPixels(padOnCliked, padOnCliked.rect, pt);            else 				buffer.copyPixels(padOff, padOff.rect, pt);        }    }            public function beat(beat16th:int) : void {		for (pt.x=beat16th*20, pt.y=0; pt.y<row*20; pt.y+=20)			bitmapData.copyPixels(padOn, padOn.rect, pt);	}}